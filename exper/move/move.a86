; Copyright 2022 S. V. Nickolas.
;
; Permission is hereby granted, free of charge, to any person obtaining a copy 
; of this software and associated documentation files (the "Software"), to 
; deal with the Software without restriction, including without limitation the 
; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
; sell copies of the Software, and to permit persons to whom the Software is 
; furnished to do so, subject to the following conditions:
;
;   1. Redistributions of source code must retain the above copyright notice, 
;      this list of conditions and the following disclaimers.
;   2. Redistributions in binary form must reproduce the above copyright 
;      notice, this list of conditions and the following disclaimers in the 
;      documentation and/or other materials provided with the distribution.
;   3. The name of the author may not be used to endorse or promote products 
;      derived from this Software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED 
; WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
;
; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

; This program is INCOMPLETE and UNTESTED, but I put the code on the server
; anyway.  Remember that the above means I'm not responsible for what you do
; with the code.
;
; NOTES:
;   1. The official MOVE cannot move a directory across drives.  To simplify
;      coding I have reproduced this limitation, but have better explained it
;      with a specific error message.
;   2. The current version only supports one source argument; the original
;      supports wildcards and multiple sources separated by commas.  I'm
;      still trying to figure out how to pull this off.
;
; Tested: file to file (works)
;         file to folder (fails)
;         file across disks (fails if target name not specified)
;           (if name specified, does two deletes)
;         folder to folder (works)

          cpu       8086
          org       0x0100
entry:    mov       ah, 0x30            ; MS-DOS 2 has some braindamage re
          int       0x21                ; file attributes, so require 3.0.
          xchg      ah, al
          cmp       ax, 0x0300
          jae       okdos
          mov       dx, edos
          call      wrstr
          int       0x20                ; EXIT DOS 1

okdos:    mov       cx, 0x0100          ; Flush BSS area for parsed command
          xor       al, al
          mov       di, args
          rep stosb
          mov       si, args            ; Yeah, I know I'm using DI and SI
          mov       di, 0x0081          ; ass-backward, sosumi
          call      killspc
%ifdef HELP
          mov       ax, [di]
          cmp       ax, '/?'            ; reversed word
          jne       .1
          mov       dx, ehelp
          jmp       scream
%endif
.1:       cmp       di, 0x0100          ; Over the edge?
          jz        rpm                 ; Yes, die screaming
          mov       ah, [di]            ; First stage: comma-separated list
          cmp       ah, '/'             ; No switches
          je        arg
          cmp       ah, 0x0D
          jz        rpm                 ; not enough parameters
          cmp       ah, ' '             ; end of source list?
          je        .5                  ; yes, skip
          cmp       ah, 0x09            ; support TAB too
          je        .5
          cmp       ah, '?'             ; Wildcard?
          je        .2
          cmp       ah, '*'             ; Wildcard (full)?
          jne       .3
.2:       mov       byte [multi], 0xFF  ; Treat as multiple sources
          jmp short .4
.3:       cmp       ah, ','             ; Convert "," to NUL terminator
          jne       .4
          mov       byte [multi], 0xFF  ; Definitely using multiple sources
          xor       ah, ah
.4:       mov       [si], ah
          inc       si
          inc       di
          jmp short .1
.5:       call      killspc
          mov       si, target
          cmp       byte [di], 0x0D     ; end of line?
          jz        rpm                 ; yes, scream
          cmp       di, 0x0100          ; over the edge?
          jz        rpm                 ; yes, scream
.6:       mov       ah, [di]
          cmp       ah, 0x0D            ; end of line?
          je        gotargs             ; yes, so we're outtie
          cmp       ah, '/'             ; still no switches
          je        arg
          cmp       ah, '?'             ; wildcard?
          je        .7                  ; yes, so die screaming
          cmp       ah, '*'             ; the other kind?
          jne       .8                  ; no
          cmp       ah, ' '             ; too many args
          jmp short argh
          cmp       ah, 0x09
          jmp short argh
.7:       mov       dx, emix
          jmp short scream
.8:       mov       [si], ah
          inc       si
          inc       di
          cmp       di, 0x0100          ; over the edge?
          jb        .6                  ; go back, Jack, and do it again
gotargs:  mov       ah, [multi]         ; Check to see if this is something we
          je        simple              ; can do simply.
          mov       dx, e73             ; (Feature not yet implemented)
          call      wrstr
          jmp short scream

arg:      mov       ah, [di+1]
          mov       [xarg], ah
          mov       dx, earg
          jmp short scream
argh:     mov       dx, eargs
          jmp short scream
rpm:      mov       dx, erpm
scream:   call      wrstr
          mov       ax, 0x4C01          ; documented error return always 1
                                        ;   (MS-DOS 6.21 help)
          int       0x21                ; EXIT CODE 1
          
; One file or directory to one path.
simple:   mov       word [psrc], args
          call      trymove
          mov       ah, 0x4C
          mov       al, [retval]
          int       0x21                ; EXIT CODE retval

trymove:  mov       dx, [psrc]          ; Print diagnostic, then set the "zero
          call      wrstrc              ; me out" pointer to somewhere we
          mov       dx, arrow           ; don't care about.
          call      wrstr
          mov       dx, target
          call      wrstrc
          mov       word [rest], triumph

          mov       dx, target
          mov       ax, 0x4300          ; Does the file exist and is it a file
          int       0x21                ; or directory?
          jc        .8                  ; Assume for now error = doesn't exist
          and       cx, 0x0010
          jz        .7                  ; It's a file.
          mov       di, target          ; It's a directory.
.1:       mov       ah, [di]            ; Look for the NUL terminator.
          or        ah, ah
          jz        .2
          inc       di
          jmp short .1
.2:       mov       [rest], di          ; Save it to restore later.
          mov       byte [di], '\'      ; Add path separator.
          inc       di
          mov       si, [psrc]
.3:       mov       ah, [si]            ; Look for the NUL terminator.
          or        ah, ah
          jz        .4
          inc       si
          jmp short .3
.4:       dec       si                  ; Move back, look for : or \
          cmp       si, [psrc]          ; Didn't find. Copy the whole thing
          je        .6
          mov       ah, [si]
          cmp       ah, '\'
          je        .5
          cmp       ah, ':'
          jne       .4
.5:       inc       si                  ; Got our basename
.6:       mov       ah, [si]
          mov       [di], ah
          inc       si
          inc       di
          or        ah, ah              ; NUL terminator?
          jnz       .6                  ; Go back, Jack, and do it again
.7:       mov       dx, target          ; Zot the file if it exists
          mov       ah, 0x41            ; UNLINK
          int       0x21
.8:       mov       dx, [psrc]
          mov       di, target
          mov       ah, 0x56
          int       0x21
          jc        .9
          mov       dx, eok
          mov       byte [rest], 0x00   ; Restore target to its original state
          jmp short wrstr
.9:       cmp       ax, 0x0011          ; Error was Rename across disks?
          je        trycopy             ; Yes, so use copy and delete instead.
          cmp       ax, 0x0002
          jne       .10
          mov       dx, efnf
          jmp short .13
.10:      cmp       ax, 0x0003
          jne       .11
          mov       dx, epnf
          jmp short .13
.11:      cmp       ax, 0x0005
          jne       .12
          mov       dx, ehal9001
          jmp short .13
.12:      mov       dx, ewut
.13:      call      wrstr
          mov       byte [rest], 0x00   ; Restore target to its original state
          mov       byte [retval], 0x01
          ret

trycopy:  call      daftcopy
          mov       dx, [psrc]
          mov       ah, 0x41            ; UNLINK
          int       0x21
          jc        .1
          mov       dx, edel
          jmp       scream
.1:       mov       dx, eok
          call      wrstr
          mov       byte [rest], 0x00   ; Restore target to its original state
          ret

killspc:  cmp       byte [di], ' '      ; Keep pushing DI as long as it points
          je        .1                  ; to whitespace (space or tab), and is
          cmp       byte [di], 0x09     ; not out of the command line area.
          jne       ksret
.1:       inc       di
          cmp       di, 0x0100
          jb        killspc
ksret:    ret

wrstr:    mov       ah, 0x09
          int       0x21
          ret
wrstrc:   push      di
          mov       di, dx
.1:       mov       ah, 0x02
          mov       dl, [di]
          or        dl, dl
          jz        .2
          int       0x21
          inc       di
          jmp short .1
.2:       pop       di
          ret

E02:      mov       dx, efnf
          jmp short toscream
E03:      mov       dx, epnf
          jmp short toscream
E04:      mov       dx, ehandles
          jmp short toscream
E05:      mov       dx, ehal9001
toscream: jmp       scream

daftcopy: mov       ax, 0x3D00          ; OPEN
          mov       dx, [psrc]
          int       0x21
          jnc       .2
          cmp       al, 0x02            ; file not found
          je        E02
.1:       cmp       al, 0x03            ; path not found
          je        E03
          cmp       al, 0x04            ; out of handles
          je        E04
          cmp       al, 0x05            ; access denied
          je        E05
          mov       dx, ewut
          jmp short toscream
.2:       mov       [srchdl], ax
          mov       ah, 0x3C            ; CREAT
          xor       cx, cx              ; 0 attribs; otherwise access denied
          mov       dx, target
          int       0x21
          jnc       .3
          push      ax                  ; cleanup
          mov       ah, 0x3E            ; CLOSE
          mov       bx, [srchdl]
          int       0x21
          pop       ax
          jmp short .1                  ; then die screaming
.3:       mov       [tgthdl], ax
.4:       mov       cx, 0x4000          ; 16K buffer
          mov       dx, buffer
          mov       bx, [srchdl]
          mov       ah, 0x3F            ; READ
          int       0x21
          or        ax, ax
          je        .6                  ; done?
          jnc       .5
          mov       dx, ein
          jmp       scream
.5:       mov       cx, ax
          mov       ah, 0x40            ; WRITE
          mov       bx, [tgthdl]
          mov       dx, buffer
          int       0x21
          jnc       .4
          mov       dx, eout
          jmp       scream
.6:       mov       ax, 0x5700          ; copy timestamps
          mov       bx, [srchdl]
          int       0x21
          mov       ax, 0x5701
          mov       bx, [tgthdl]
          int       0x21
          mov       ah, 0x3E            ; CLOSE
          mov       bx, [srchdl]
          int       0x21
          mov       ah, 0x3E            ; CLOSE
          mov       bx, [tgthdl]
          int       0x21
          mov       ax, 0x4300          ; copy attribs
          mov       dx, [psrc]
          int       0x21
          mov       ax, 0x4301
          mov       dx, target
          int       0x21
          mov       dx, eok
          call      wrstr
          clc
          ret

%ifdef HELP
; NOTE: lines in this section exceed 79 chars

ehelp:    db        "Moves files and renames files and directories.", 13, 10, 13, 10
          db        "To move one or more files:", 13, 10
          db        "MOVE [drive:][path]filename1[,...] destination", 13, 10, 13, 10
          db        "  [drive:][path]filename1 Specifies the location and name of the file", 13, 10
          db        "                          or files you want to move.", 13, 10
          db        "  destination             Specifies the new location of the file. Destination", 13, 10
          db        "                          can consist of a drive letter and colon, a directory", 13, 10
          db        "                          name, or a combination. If you are moving only one", 13, 10
          db        "                          file, you can also include a filename if you want", 13, 10
          db        "                          to rename the file when you move it.", 13, 10, 13, 10
          db        "To rename a directory:", 13, 10
          db        "MOVE [drive:][path]dirname1 dirname2", 13, 10, 13, 10
          db        "  [drive:][path]dirname1  Specifies the directory you want to rename.", 13, 10
          db        "  dirname2                Specifies the new name of the directory.", 13, 10, 13, 10
          db        "NOTE: If the destination you specify is an existing file and the source is a", 13, 10
          db        "      single file, MOVE replaces the destination file with the file you are", 13, 10
          db        "      moving.", 13, 10, "$"
%endif

edos:     db        "Incorrect DOS version", 13, 10, "$"
earg:     db        "Invalid switch - /"
xarg:     db        0
ecrlf:    db        13, 10, "$"
eargs:    db        "Too many parameters", 13, 10, "$"
erpm:     db        "Required parameter missing", 13, 10, "$"
emix:     db        "Cannot move multiple files to a single file", 13, 10, "$"
exmv:     db        " [cannot move directory across drives]", 13, 10, "$"
efnf:     db        " [file not found]", 13, 10, "$"
epnf:     db        " [invalid path]", 13, 10, "$"
ehandles: db        " [too many open files]", 13, 10, "$"
ehal9001: db        " [access denied]", 13, 10, "$"
ewut:     db        " [internal error]", 13, 10, "$"
ein:      db        " [read error]", 13, 10, "$"
eout:     db        " [write error]", 13, 10, "$"
edel:     db        " [could not delete source]", 13, 10, "$"

; We haven't yet implemented this feature
e73:      db        "Advanced feature", 13, 10, "$"

arrow:    db        " => $"
eok:      db        " [ok]", 13, 10, "$"

multi:    db        0x00

retval:   db        0x00

psrc:     dw        args
rest:     dw        0x0000              ; restore target to its original state

triumph:  db        0x00                ; convenient place...for me to poop on

srchdl:   dw        0x0000
tgthdl:   dw        0x0000

tail:
args      equ       tail
target    equ       args+0x0080
wcbuild   equ       args+0x0100
ffblk     equ       args+0x0180
buffer    equ       args+0x0200
